## JWT 뭘까?

__JWT은 일반적으 클라이언와 서버 통신 시 권한 인가(Authorization)을 위해 사용하는 토큰이다.__

### 기본 동작 원리
- 1. 클라이언트에서 ID/PW를 통해 로그인을 요청하면
- 2. 서버에서 DB에 해당 ID/PW를 가진 User가 있다면, __Access Token__과 __Refresh Token__을 발급해준다.
- 3. 클라이언트는 발급받은 __Access Token__ 을 헤더에 담아서 서버가 허용한 API를 사용할 수 있게 된다.

여기서 __Refresh Token__은 새로운 Access Token을 발급하기 위한 토큰이다.
기본적으로 __Access Token은 외부 유출 문제로 인해 유효기간을 짧게 설정하는데, 정상적인 클라이언트는
유효기간이 끝난 __Access Token에 대해 __Refresh Token__을 사용하여 새로운 __Access Token__을 발급받을 수 있다.
따라서, __Refresh Token의 유효기간은 __Access Token의 유효기간보다 길게 설정해야 한다고 생각할 수 있다.


### build.gradle
```gradle
dependencies{
//security
 implementation 'org.springframework.boot:spring-boot-starter-security'

 // jwt
 implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
 implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
 implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}
```

### Tokeninfo
- 먼저 클라이언트 토큰을 보내기위한 DTO 생성한다.

```java
@Builder
@Data
@AllArgsConstructor
public class TokenInfo {

    private String grantType;
    private String accessToken;
    private String refreshToken;
}
```

### JwtTokenProvider
- JWT 토큰 생성, 토큰 복호화 및 정보 추출, 토큰 유효성 검증의 기능이 구현된 클래스이다.
- 그전에 yml설정부터 하자

```yml
jwt:
  secret: VlwEyVBsYt9V7zq57TejMnVUyzblYcfPQye08f7MGVA9XkHa
```
- 토큰의 암호화 복호화를 위한 secret key로서 이후 HS256 알고리즘을 사용하기 위해, 256비트보다 커야한다.
알파벳은 한단어 당 8bit 이므로 32글자 이상이면 된다.

- 다음은 JwtTokenProvider 코드이다.

```java
@Slf4j
@Component
public class JwtTokenProvider {

    private final Key key;

    public JwtTokenProvider(@Value("${jwt.secret}") String secretKey) {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        this.key = Keys.hmacShaKeyFor(keyBytes);
    }

    // 유저 정보를 가지고 AccessToken, RefreshToken 을 생성하는 메서드
    public TokenInfo generateToken(Authentication authentication) {
        // 권한 가져오기
        String authorities = authentication.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.joining(","));

        long now = (new Date()).getTime();
        // Access Token 생성
        Date accessTokenExpiresIn = new Date(now + 86400000);
        String accessToken = Jwts.builder()
                .setSubject(authentication.getName())
                .claim("auth", authorities)
                .setExpiration(accessTokenExpiresIn)
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();

        // Refresh Token 생성
        String refreshToken = Jwts.builder()
                .setExpiration(new Date(now + 86400000))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();

        return TokenInfo.builder()
                .grantType("Bearer")
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .build();
    }

    // JWT 토큰을 복호화하여 토큰에 들어있는 정보를 꺼내는 메서드
    public Authentication getAuthentication(String accessToken) {
        // 토큰 복호화
        Claims claims = parseClaims(accessToken);

        if (claims.get("auth") == null) {
            throw new RuntimeException("권한 정보가 없는 토큰입니다.");
        }

        // 클레임에서 권한 정보 가져오기
        Collection<? extends GrantedAuthority> authorities =
                Arrays.stream(claims.get("auth").toString().split(","))
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList());

        // UserDetails 객체를 만들어서 Authentication 리턴
        UserDetails principal = new User(claims.getSubject(), "", authorities);
        return new UsernamePasswordAuthenticationToken(principal, "", authorities);
    }

    // 토큰 정보를 검증하는 메서드
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
            return true;
        } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
            log.info("Invalid JWT Token", e);
        } catch (ExpiredJwtException e) {
            log.info("Expired JWT Token", e);
        } catch (UnsupportedJwtException e) {
            log.info("Unsupported JWT Token", e);
        } catch (IllegalArgumentException e) {
            log.info("JWT claims string is empty.", e);
        }
        return false;
    }

    private Claims parseClaims(String accessToken) {
        try {
            return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(accessToken).getBody();
        } catch (ExpiredJwtException e) {
            return e.getClaims();
        }
    }
}
```
